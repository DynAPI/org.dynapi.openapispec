package org.dynapi.openapispec.core.objects;

import lombok.*;
import org.dynapi.openapispec.core.OpenApiSpecAble;
import org.json.JSONObject;

@With
@ToString
@EqualsAndHashCode
@Builder(toBuilder = true)
public class SecurityScheme implements OpenApiSpecAble {
    /** The type of the security scheme. Valid values are {@code "apiKey"}, {@code "http"}, {@code "oauth2"}, {@code "openIdConnect"}. */
    @NonNull
    public final Type type;
    /** A short description for security scheme. CommonMark syntax MAY be used for rich text representation. */
    public final String description;
    /** The name of the header, query or cookie parameter to be used. */
    public final String apiKeyHeaderName;
    /** The location of the API key. Valid values are {@code "query"}, {@code "header"} or {@code "cookie"}. */
    public final ApiKeyIn apiKeyIn;
    /** The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.
     * The values used SHOULD be registered in the IANA Authentication Scheme registry. */
    public final String httpScheme;
    /** A hint to the client to identify how the bearer token is formatted.
     * Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes. */
    public final String httpBearerFormat;
//    /** An object containing configuration information for the flow types supported. */
//    public final OAuthFlows flows;
    /** OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. */
    public final String openIdConnectUrl;

    @Override
    public JSONObject getOpenApiSpec() {
        return new JSONObject()
                .put("type", type.value)
                .put("description", description)
                .put("name", apiKeyHeaderName)
                .put("in", apiKeyIn == null ? null : apiKeyIn.value)
                .put("scheme", httpScheme)
                .put("bearerFormat", httpBearerFormat)
//                .put("flows", flows)
                .put("openIdConnectUrl", openIdConnectUrl);
    }

    public enum Type {
        API_KEY("apiKey"),
        HTTP("http"),
        OAUTH2("oauth2"),
        OPEN_ID_CONNECT("openIdConnect"),
        ;

        public final String value;

        Type(String value) {
            this.value = value;
        }
    }

    public enum ApiKeyIn {
        QUERY("query"),
        HEADER("header"),
        COOKIE("cookie"),
        ;

        public final String value;

        ApiKeyIn(String value) {
            this.value = value;
        }
    }
}
